$ npm i -D prisma
$ npx prisma init --datasource-provider sqlite
Провайдером БД выбрана sqlite.
Создана схема данных Prisma.
Описаны модели Prisma.


    Создание миграции и генерация клиента Prisma
Создать миграцию с помощью Prisma CLI:
    $ npx prisma migrate dev --name init
Сгенерировать Prisma Client с помощью команды
    $ npx prisma generate
По умолчанию Prisma Client генерируется в папку node_modules/.prisma/client, но можно указать и другое расположение. 2
Важно каждый раз генерировать клиент Prisma после каждого изменения в Prisma схеме,
чтобы обновить сгенерированный код Prisma Client.


Запуск Prisma Studio из папки /apps/server:
    $ npx prisma studio

Для запуска Prisma Studio из другого места:
    $ npx prisma studio --schema='/location/to/schema.prisma'
например, из корня приложения:$ npx prisma studio --schema='apps/server'
    $ npx prisma studio --schema='apps/server'
Чтобы эта команда сработала, нужно добавить
  previewFeatures = ["prismaSchemaFolder"]
в generator client в файле /apps/server/prisma/schema.prisma

Очистить базу данных:
$ npx prisma migrate reset

Увеличить время ожидания пула соединений БД можно передав в строку подключения search-parameter pool_timeout, например 
до 20 секунд:
DATABASE_URL="file:./dev.db?pool_timeout=20" //помогает не всегда. Решение проблемы ниже.

Окончательно решить проблему с ошибкой, возникавшей при "посеве" БД с использованием Promise.all(), хранящейся на
медленном HDD, из-за истечения timeout, удалось передав в строку подключения connection_limit=1&socket_timeout=10:
    DATABASE_URL="file:./dev.db?connection_limit=1&socket_timeout=10"

Чтобы PrismaService был доступен во всем приложении, нужно импортировать PrismaModule в AppModule.
При этом PrismaModule должен быть декорирован @Global(), чтобы он был доступен во всем приложении.

В отличие от TypeORM при использовании Prisma с GraphQL описывать свойства сущностей приходится не только в модели (schema.prisma), но и в entities.